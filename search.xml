<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux基础知识与指令</title>
    <url>/2021/12/08/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B8%8E%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h1><span id="一-linux介绍">一、Linux介绍</span></h1><h2><span id="11概述">1.1概述</span></h2><p>Linux,全称GNU/Linux,是一个开源、免费的操作系统，其稳定性、安全性、处理多并发的优点已经得到业界认可，很多企业级的项目（c/c++/php/python/java/go)都会部署到Linux/unix系统上。</p>
<h2><span id="12linux主要发行版">1.2Linux主要发行版</span></h2><p>Ubuntu(乌班图)、RedHat(红帽)、CentOS、Debain（蝶变）、Fedora、SuSE、OpenSUSE</p>
<h2><span id="13-linux目录结构">1.3 Linux目录结构</span></h2><p><strong>在Linux世界里，一切皆文件</strong></p>
<span id="more"></span>  
<p><code> 1./bin  [常用] （usr/bin、/usr/local/bin）</code><br>是Binary的缩写，这个目录里存放着经常使用的命令<br><code>2./sbin (/usr/sbin、usr/local/sbin) </code><br>s就是Super User 的意思，这里存放的是系统管理员使用的系统管理程序。<br><code>3./home  [常用]  </code><br>存放普通用户的主目录，在Linux中每个用户都有一个自己的目录，一般该目录是以用户的账号命名<br><code>4./root  [常用] </code><br>该目录为系统管理员，也称作超级权限者的用户主目录<br><code>5./lib </code><br>系统开机所需要最基本的动态链接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库<br><code>6./lost+found </code><br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件<br><code>7./etc  [常用]  </code><br>所有的系统管理所需要的配置文件和子目录，比如安装mysql数据库my.conf<br><code>8./usr  [常用] </code><br>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下的program files 目录。<br><code>9./boot  [常用] </code><br>存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件<br><code>10./proc  [不能动] </code><br>这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息<br><code> 11./src  [不能动]</code><br>service缩写，该目录存放一些服务启动之后需要提取的数据<br><code>12./sys  [不能动] </code><br>这是Linux2.6内核的一个很大的变化。该目录下安装的2.6内核中新出现的一个文件系统sysfs<br><code>13./tmp </code><br>这个目录是用来存放一些临时文件的<br><code>14. /dev </code><br>类似于Window的设备管理器，把所有硬件用文件的形式存储<br><code>15./media  [常用]</code><br>linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下<br><code>16./mnt  [常用] </code><br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在/mnt/上，然后进入该目录就可以查看里面的内容了<br><code>17. /opt</code><br>这是给主机额外安装软件所存放的目录。如安装ORACLE数据库就可放到该目录下。默认为空<br><code>18./usr/local  [常用] </code><br>这是另一个给主机额外安装软件所存放的目录。一般是通过编译源码方式安装的程序<br><code>19./var  [常用] </code><br>这个目录中存放着在不断扩充着的东西，习惯将经常被修改的目录放在这个目录下。包括各种日志文件<br><code>20./selinux [security-enhanced linux] </code><br>SELinux 是一种安全子系统，它能控制程序只能访问特定文件，有三种工作模式，可以自行设置  </p>
<h1><span id="二-开机-重启与用户登录注销指令">二、开机、重启与用户登录注销指令</span></h1><h2><span id="21-关机amp重启指令">2.1 关机&amp;重启指令</span></h2><h3><span id="211-基本介绍">2.1.1 基本介绍</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shutdown -h now                           立刻进行关机</span><br><span class="line">shutdow -h l                              <span class="string">&quot;hello,l分钟后会关机了&quot;</span></span><br><span class="line">shutdow -r now                            现在重启计算机</span><br><span class="line">halt                                      关机，和上面作用一样</span><br><span class="line">reboot                                    现在重启计算机</span><br><span class="line">sync                                      把内存的数据同步到磁盘</span><br></pre></td></tr></table></figure>
<h3><span id="212-使用细节">2.1.2 使用细节</span></h3><p>1.不管是重启系统还是关闭系统，首先运行sync,把内存中的数据写入到磁盘中<br>2.目前的 <code>shutdown/reboot/halt</code> 等指令均已在关机前进行了sync<br><strong>tips:小心驶得万年船</strong></p>
<h2><span id="22-用户登录和注销">2.2 用户登录和注销</span></h2><h3><span id="221-基本介绍">2.2.1 基本介绍</span></h3><p>1.登录是尽量少用<strong>root</strong>用户登录，因为其是系统管理员，权限最大。避免操作失误，可以用普通用户登录，之后用<code>su -root </code>切换到系统管理员身份。<br>2.在提示符下输入<code>logout</code>即可注销用户。</p>
<h3><span id="222-使用细节">2.2.2 使用细节</span></h3><p>1.<code>logout</code>注销指令在图形界面级别下无效，在运行级别3下有效</p>
<h1><span id="三-用户管理指令">三、用户管理指令</span></h1><h2><span id="31-添加用户">3.1 添加用户</span></h2><h3><span id="311-基本语法">3.1.1 基本语法</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd [用户名]</span><br></pre></td></tr></table></figure>
<p>###3.1.2使用细节<br>1.当创建用户成功后，会自动创建和用户同名的家目录<br>2.也可以通过<code>useradd -d 指定目录 新的用户名</code>，给创建的用户指定家目录</p>
<h2><span id="32-指定修改密码">3.2 指定/修改密码</span></h2><h3><span id="321-基本语法">3.2.1 基本语法</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd [用户名]</span><br></pre></td></tr></table></figure>
<h2><span id="33-删除用户">3.3 删除用户</span></h2><h3><span id="331-基本语法">3.3.1 基本语法</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">userdel [用户]</span><br></pre></td></tr></table></figure>
<h3><span id="332-使用细节">3.3.2 使用细节</span></h3><p>1.<code>userdel</code>只删除用户，保留家目录；<code>userdel -r</code>，删除用户及家目录。一般保留家目录。 </p>
<h2><span id="34查询用户信息指令">3.4查询用户信息指令</span></h2><h3><span id="341-基本语法">3.4.1 基本语法</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">id [用户名]</span><br></pre></td></tr></table></figure>
<h3><span id="342-使用细节">3.4.2 使用细节</span></h3><p>1.当用户不存在时，返回无此用户</p>
<h2><span id="35-切换用户">3.5 切换用户</span></h2><h3><span id="351-基本语法">3.5.1 基本语法</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su -[切换用户名]</span><br></pre></td></tr></table></figure>
<h3><span id="352-使用细节">3.5.2 使用细节</span></h3><p>1.当从权限高的用户切换到权限低的用户时不需要密码，反之需要<br>2.当需要返回原来的用户时，使用<code>exit/logout</code>指令</p>
<h2><span id="36-查看当前用户">3.6 查看当前用户</span></h2><h3><span id="361-基本语法">3.6.1 基本语法</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">who am i</span><br></pre></td></tr></table></figure>
<h2><span id="37-用户组">3.7 用户组</span></h2><h3><span id="371-新增组">3.7.1 新增组</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupadd [组名]</span><br></pre></td></tr></table></figure>
<h3><span id="372-删除组">3.7.2 删除组</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupdel [组名]</span><br></pre></td></tr></table></figure>
<h3><span id="373-修改用户的组">3.7.3 修改用户的组</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd -g [用户组] [用户名]</span><br></pre></td></tr></table></figure>
<h2><span id="38-用户和组相关文件">3.8 用户和组相关文件</span></h2><h3><span id="381">3.8.1</span></h3> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/passwd</span><br></pre></td></tr></table></figure>
<p> 说明：用户（user）的配置文件，记录用户的各种信息<br> 每行的含义：用户名：口令:用户标识号：组标识号：注释性描述：主目录：登录Shell</p>
<h3><span id="382">3.8.2</span></h3> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/shadow</span><br></pre></td></tr></table></figure>
<p> 说明：口令的配置文件<br> 每行的含义：登录名：加密口令：最后一次修改时间：最小时间间隔：最大时间间隔：警告时间：不活动时间：失效时间：标志</p>
<h3><span id="383">3.8.3</span></h3> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/group</span><br></pre></td></tr></table></figure>
<p> 说明：组（group）的配置文件，记录Linux包含的组的信息<br> 每行的含义：组名：口令：组标识号：组内用户列表</p>
<h1><span id="四-实用指令">四、实用指令</span></h1><h2><span id="41-指定运行级别">4.1 指定运行级别</span></h2><h3><span id="411-基本语法">4.1.1 基本语法</span></h3> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">init 0</span><br><span class="line">init 1</span><br><span class="line">init 2</span><br><span class="line">init 3</span><br><span class="line">init 4</span><br><span class="line">init 5</span><br><span class="line">init 6</span><br></pre></td></tr></table></figure>
<h3><span id="412-说明">4.1.2 说明</span></h3><p> 0：关机<br> 1：单用户【找回丢失密码】<br> 2：多用户状态无网络服务<br> <strong>3：多用户状态有网络服务</strong><br> 4:系统未实用保留给用户<br> 5：图形界面<br> 6：系统重启<br>常用运行级别是3和5，也可以指定默认运行级别</p>
<h3><span id="413-设置默认运行级别">4.1.3 设置默认运行级别</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl set-default TARGET.target</span><br></pre></td></tr></table></figure>
<h3><span id="414-获取当前默认运行级别">4.1.4 获取当前默认运行级别</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl get-default</span><br></pre></td></tr></table></figure>
<h2><span id="42-帮助指令">4.2 帮助指令</span></h2><h3><span id="421-man获得帮助信息">4.2.1 <code>man</code>获得帮助信息</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">man [命令或配置文件]</span><br></pre></td></tr></table></figure>
<p>例子：<code>man ls</code></p>
<h3><span id="422-help指令">4.2.2 <code>help</code>指令</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span></span><br></pre></td></tr></table></figure>
<h2><span id="43文件目录类指令">4.3文件目录类指令</span></h2><h2><span id="431-显示当前工作目录的绝对路径">4.3.1 显示当前工作目录的绝对路径</span></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure>
<h3><span id="432-查看当前目录内容">4.3.2 查看当前目录内容</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls [选项] [目录或者文件]</span><br></pre></td></tr></table></figure>
<p>常用选项<br>-a：显示当前目录的所有文件和目录，包括隐藏的<br>-l：以列表的方式显示信息</p>
<h3><span id="433-切换到指定目录">4.3.3 切换到指定目录</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> [参数]</span><br><span class="line"><span class="built_in">cd</span> ~                                切换到自己的家目录</span><br><span class="line"><span class="built_in">cd</span> ..                               返回当前目录的上一级目录</span><br></pre></td></tr></table></figure>
<h3><span id="434-创建目录">4.3.4 创建目录</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir [选项] [要创建的目录]</span><br></pre></td></tr></table></figure>
<p>常用选项<br>-p：创建多级目录</p>
<h3><span id="435-删除空目录">4.3.5 删除空目录</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rmdir [选项] [要删除的空目录]</span><br></pre></td></tr></table></figure>
<h3><span id="436-创建空文件">4.3.6 创建空文件</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch [文件名称]</span><br></pre></td></tr></table></figure>
<h3><span id="437-拷贝指令">4.3.7 拷贝指令</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp [选项] [源文件] [目标目录]</span><br></pre></td></tr></table></figure>
<p>常用选项<br>-r：递归复制整个文件夹</p>
<h3><span id="438-指令移除文件或目录">4.3.8 指令移除文件或目录</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm [选项] [要删除的文件或目录]</span><br></pre></td></tr></table></figure>
<p>常用选项<br>-r：递归删除整个文件夹<br>-f：强制删除不提示</p>
<h3><span id="439-移动文件与目录重命名">4.3.9 移动文件与目录重命名</span></h3><p>基本语法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv [旧文件名] [新文件名]                   重命名</span><br><span class="line">mv [原文件] [新目录]                       移动文件</span><br></pre></td></tr></table></figure>
<h3><span id="4310-查看文件内容">4.3.10 查看文件内容</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat [选项] [要查看的文件]</span><br></pre></td></tr></table></figure>
<p>常用选项<br>-n：显示行号<br>使用细节<br><code>cat</code>只能浏览文件而不能修改文件，使用时一般带上管道命令 <code>| more</code></p>
<h3><span id="4311-more指令">4.3.11 more指令</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">more [文件]</span><br></pre></td></tr></table></figure>
<p>more指令是一个基于VI的文本过滤器，它以全屏的方式按页显示文本文件的内容</p>
<table>
<thead>
<tr>
<th align="left">操作</th>
<th align="left">功能说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">space</td>
<td align="left">代表向下翻一页</td>
</tr>
<tr>
<td align="left">Enter</td>
<td align="left">代表向下翻一行</td>
</tr>
<tr>
<td align="left">q</td>
<td align="left">代表立刻离开more，不显示文件内容</td>
</tr>
<tr>
<td align="left">Ctrl+F</td>
<td align="left">向下滚动一屏</td>
</tr>
<tr>
<td align="left">Ctrl+B</td>
<td align="left">返回上一屏</td>
</tr>
<tr>
<td align="left">=</td>
<td align="left">输出当前行的行号</td>
</tr>
<tr>
<td align="left">:f</td>
<td align="left">输出文件名和当前行的行号</td>
</tr>
</tbody></table>
<h3><span id="4312-less指令">4.3.12 less指令</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">less [文件]</span><br></pre></td></tr></table></figure>
<p>less指令用来分屏查看文件内容，它的功能与more指令类似，但是比more指令更加强大，支持各种显示终端。less指令在显示文件内容时，并不是一次将整个文件健在之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率。  </p>
<table>
<thead>
<tr>
<th align="left">操作</th>
<th align="left">功能说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">space</td>
<td align="left">代表向下翻一页</td>
</tr>
<tr>
<td align="left">[pagedown]</td>
<td align="left">代表向下翻一页</td>
</tr>
<tr>
<td align="left">[pageup]</td>
<td align="left">代表向上翻一页</td>
</tr>
<tr>
<td align="left">/字串</td>
<td align="left">向下搜寻字串的功能;n向下查找，N向上查找</td>
</tr>
<tr>
<td align="left">?字串</td>
<td align="left">向上搜寻字串的功能;n向下查找，N向上查找</td>
</tr>
<tr>
<td align="left">q</td>
<td align="left">退出程序</td>
</tr>
</tbody></table>
<h3><span id="4313-echo指令">4.3.13 echo指令</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> [选项] [输出内容]                               </span><br></pre></td></tr></table></figure>
<h3><span id="4314-head指令">4.3.14 head指令</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">head [文件]</span><br><span class="line">head -n 5 [文件]                   查看文件的前5行内容</span><br></pre></td></tr></table></figure>
<p>head默认查看文件的前十行内容</p>
<h3><span id="4315-tail指令">4.3.15 tail指令</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tail [文件]</span><br><span class="line">tail -n 5 [文件]                   查看文件尾部5行内容 </span><br><span class="line">tail -f                            实时追踪该文档的所有更新 </span><br></pre></td></tr></table></figure>
<p>tail默认查看文件的尾部十行内容</p>
<h3><span id="4316-gt-和-gtgt-输出重定向和追加指令">4.3.16 &gt; 和 &gt;&gt; （输出重定向和追加）指令</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -l &gt; [文件]  （功能描述：列表的内容写入文件中）</span><br><span class="line">ls -al &gt;&gt; [文件] （功能描述：列表的内容追加到文件的末尾）</span><br></pre></td></tr></table></figure>
<h3><span id="4316-ln指令">4.3.16 ln指令</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln -s [原文件目录] [软链接名] （功能描述：给原文件创建一个软链接）</span><br></pre></td></tr></table></figure>
<p>软链接也称符号链接，类似于Windows里的快捷方式。</p>
<h3><span id="4317-history指令">4.3.17 history指令</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">history</span> (功能描述：查看已执行过的历史命令)</span><br></pre></td></tr></table></figure>

<h2><span id="44-时间日期类指令">4.4 时间日期类指令</span></h2><h3><span id="441-date指令-显示当前日期">4.4.1 date指令-显示当前日期</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">date            (功能描述：显示当前时间)</span><br><span class="line">date +%Y        (功能描述：显示当前年份)</span><br><span class="line">date +%m        (功能描述：显示当前月份)</span><br><span class="line">date +%d        (功能描述：显示当前是哪一天)</span><br><span class="line">date +%Y-%m-%d-%H:%M:%S (功能描述：显示年月日时分秒)</span><br></pre></td></tr></table></figure>
<h3><span id="442-date指令-设置日期">4.4.2 date指令-设置日期</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">date -s <span class="string">&quot;时间&quot;</span></span><br></pre></td></tr></table></figure>
<h3><span id="443-cal指令查看日历">4.4.3 cal指令（查看日历）</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cal [选项] （功能描述：不加选项，显示本月日历）</span><br></pre></td></tr></table></figure>
<h2><span id="45搜索查找类指令">4.5搜索查找类指令</span></h2><h3><span id="451-find指令">4.5.1 find指令</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find [搜索范围] [选项]</span><br></pre></td></tr></table></figure>
<p>find指令将从指定目录乡下递归地遍历其各个子目录，将满足条件的文件或者目录显示在终端。</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-name&lt;查询方式&gt;</td>
<td align="left">按照指定的文件名查找模式查找文件</td>
</tr>
<tr>
<td align="left">-user&lt;用户名&gt;</td>
<td align="left">查找属于该用户名的所有文件</td>
</tr>
<tr>
<td align="left">-size&lt;文件大小&gt;</td>
<td align="left">按照指定的文件大小查找文件</td>
</tr>
</tbody></table>
<h3><span id="452-locate指令">4.5.2 locate指令</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">locate [搜索文件]</span><br></pre></td></tr></table></figure>
<p>locate指令可以快速定位文件路径，locate指令利用事先建立的系统中所有文件名称及路径的locate数据库实现快速定位给定的文件。Locate指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新locate时刻。<br>tips：由于locate指令基于数据库进行查询，所以第一次运行前需使用 <code>updatedp </code>指令创建locate数据库</p>
<h3><span id="453-grep指令和-管道符号">4.5.3 grep指令和 | 管道符号</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep [选项] [查找内容] [源文件]</span><br></pre></td></tr></table></figure>
<p>grep过滤查找，管道符号 | 表示将前一个命令的处理结果传递给后面的命令处理</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-n</td>
<td align="left">显示匹配及行号</td>
</tr>
<tr>
<td align="left">-i</td>
<td align="left">忽略字母大小写</td>
</tr>
</tbody></table>
<h2><span id="46压缩和解压类">4.6压缩和解压类</span></h2><h3><span id="461-gzip-和-gunzip-指令">4.6.1 gzip 和 gunzip 指令</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gzip [文件] (功能描述：压缩文件，只能将文件压缩为*.gz文件)</span><br><span class="line">gunzip [文件.gz] （功能描述：解压缩文件指令）</span><br></pre></td></tr></table></figure>
<h3><span id="462-zip-和-unzip-指令">4.6.2 zip 和 unzip 指令</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zip [选项] XXX.zip (功能描述：压缩文件)</span><br><span class="line">unzip [选项] XXX.zip （功能描述：解压缩文件）</span><br></pre></td></tr></table></figure>
<p><code> zip</code>指令常用选项<br><code>-r </code>:递归压缩，即压缩目录<br><code>unzip </code>指令常用选项<br><code>-d &lt;目录&gt;</code>:指定解压后文件存放目录</p>
<h3><span id="463-tar-指令">4.6.3 tar 指令</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar [选项] XXX.tar.gz (功能描述，打包目录，压缩后的文件格式.tar.gz)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-c</td>
<td align="left">产生.tar打包文件</td>
</tr>
<tr>
<td align="left">-v</td>
<td align="left">显示详细信息</td>
</tr>
<tr>
<td align="left">-f</td>
<td align="left">指定压缩后的文件名</td>
</tr>
<tr>
<td align="left">-z</td>
<td align="left">打包同时压缩</td>
</tr>
<tr>
<td align="left">-x</td>
<td align="left">解包.tar文件</td>
</tr>
</tbody></table>
<h1><span id="五-组管理和权限管理">五、 组管理和权限管理</span></h1><h2><span id="51-linux组基本介绍">5.1 Linux组基本介绍</span></h2><p>在Linux中的每个用户必须属于一个组，不能独立于组外。在Linux中每个文件有所有者、所在组、其它组的概念</p>
<h2><span id="52文件目录-所有者">5.2文件/目录 所有者</span></h2><p>一般为文件的创建者，谁创建了该文件，就自然成为文件的所有者。</p>
<h3><span id="521-查看文件的所有者">5.2.1 查看文件的所有者</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -ahl</span><br></pre></td></tr></table></figure>
<h3><span id="522-修改文件的所有者">5.2.2 修改文件的所有者</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chown 用户名 文件名</span><br></pre></td></tr></table></figure>
<h2><span id="53-组的创建">5.3 组的创建</span></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupadd [组名]</span><br></pre></td></tr></table></figure>
<h2><span id="54-文件目录-所在组">5.4 文件/目录 所在组</span></h2><p>当某个用户创建了文件后，该文件所在的组就是该用户所在的组。</p>
<h3><span id="541-查看文件的所在组">5.4.1 查看文件的所在组</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -ahl</span><br></pre></td></tr></table></figure>
<h3><span id="542-修改文件的所在组">5.4.2 修改文件的所在组</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chgrp 用户名 文件名</span><br></pre></td></tr></table></figure>
<h3><span id="55-改变用户所在的组">5.5 改变用户所在的组</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useermod -g [新组名] [用户名]</span><br><span class="line">usermod -d [目录名] [用户名] 改变该用户登录的初始目录，用户需要有进入到新目录的权限</span><br></pre></td></tr></table></figure>
<h2><span id="56-权限的基本介绍">5.6 权限的基本介绍</span></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-rwxrwxrwx</span><br></pre></td></tr></table></figure>
<p>0-9位介绍：<br>第0位确定文件类型：(d,-,l,c,b)<br><strong>l是链接，相当于Windows的快捷方式</strong><br><strong>d是目录,相当于Windows的文件夹</strong><br><strong>c是字符设备文件，鼠标，键盘</strong><br><strong>b是块设备，比如硬盘</strong><br>第1-3位确定<strong>所有者</strong>(该文件的所有者)拥有该文件的权限， –User<br>第4-6位确定<strong>所属组</strong>(同用户组)拥有该文件的权限，  –Group<br>第7-9位确定<strong>其他用户</strong>拥有该文件的权限 –Other</p>
<h2><span id="57-rwx权限详解">5.7 rwx权限详解</span></h2><h3><span id="571-rwx作用到文件">5.7.1 rwx作用到文件</span></h3><p>1.<strong>r</strong> 代表可读(read):可以读取，查看。<br>2.<strong>w</strong> 代表可写(write):可以修改，但是不代表可以删除该文件，删除一个文档的前提条件是对该文件所在的目录有写权限，才能删除该文件<br>3.<strong>x</strong> 代表可执行(execute):可以被执行</p>
<h3><span id="572-rwx作用到目录">5.7.2 rwx作用到目录</span></h3><p>1.<strong>r</strong> 代表可读(read):可以读取，<code>ls </code>查看目录内容。<br>2.<strong>w</strong> 代表可写(write):可以修改，对目录内创建+删除+重命名目录<br>3.<strong>x</strong> 代表可执行(execute):可以进入该目录</p>
<h2><span id="58-修改权限-chmod指令">5.8 修改权限 - chmod指令.</span></h2><p>通过<code>chmod</code>指令，可以修改<strong>文件或目录</strong>的权限  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod [权限] [文件或目录]</span><br></pre></td></tr></table></figure>
<h3><span id="581-第一种方式-变更权限">5.8.1 第一种方式：+、-、=变更权限</span></h3><p>u:所有者 g：所有组 o：其他人 a:所有人(u、g、o的总和)<br>For example:u+x,g-r,u=rwx</p>
<h3><span id="582-第二种方式通过数字变更权限">5.8.2 第二种方式：通过数字变更权限</span></h3><p>r=4,w=2,x=1<br>For example:777</p>
<h1><span id="六-定时任务调度">六、定时任务调度</span></h1><h2><span id="61-crond-任务调度">6.1 crond 任务调度</span></h2><h3><span id="611-基本概念">6.1.1 基本概念</span></h3><p>任务调度：是指系统在某个时间执行的特定命令或程序</p>
<h3><span id="612-基本指令">6.1.2 基本指令</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab [选项]</span><br></pre></td></tr></table></figure>
<h3><span id="613-常用选项">6.1.3 常用选项</span></h3><table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-e</td>
<td align="left">编辑crontab定时任务</td>
</tr>
<tr>
<td align="left">-l</td>
<td align="left">查询crontab定时任务</td>
</tr>
<tr>
<td align="left">-r</td>
<td align="left">删除当前用户的所有crontab任务</td>
</tr>
</tbody></table>
<h3><span id="614-快速入门">6.1.4 快速入门</span></h3><p>设置任务调度文件: <code>/etc/crontab</code><br>设置个人任务调度。执行<code>crontab -e</code>命令。<br>接着输入任务到调度文件<br>For example:<code>*/1 * * * * ls-l /etc/ &gt; /tmp/to.txt </code>代表每小时每分钟执行ls -l /etc/ &gt; /tmp/to.txt 指令<br><strong>参数细节说明：</strong></p>
<table>
<thead>
<tr>
<th align="left">项目</th>
<th align="left">含义</th>
<th align="left">范围</th>
</tr>
</thead>
<tbody><tr>
<td align="left">第一个”*”</td>
<td align="left">分钟</td>
<td align="left">0-59</td>
</tr>
<tr>
<td align="left">第二个”*”</td>
<td align="left">小时</td>
<td align="left">0-23</td>
</tr>
<tr>
<td align="left">第三个”*”</td>
<td align="left">天</td>
<td align="left">1-31</td>
</tr>
<tr>
<td align="left">第四个”*”</td>
<td align="left">月</td>
<td align="left">1-12</td>
</tr>
<tr>
<td align="left">第五个”*”</td>
<td align="left">星期几</td>
<td align="left">0-7(0和7都代表星期日)</td>
</tr>
</tbody></table>
<p><strong>特殊符号的说明：</strong><br>|特殊符号|含义|<br>|:–|:–|<br>|* |代表任何时间，比如第一个”<em>“就代表一小时中每分钟都执行一次|<br>|,|代表不连续的时间，比如”0 8,12,16 * * <em>命令”,就代表在每天的8点0分，12点0分，16点0分都执行一次命令|<br>|-|表示连续的时间范围。比如”0 5 * * 1-6命令”，代表周一到周六的凌晨5:00执行命令 |<br>|</em>/n|代表每隔多久执行一次，比如”</em>/10 * * * *命令”，代表每隔10分钟执行一次命令|</p>
<h2><span id="62-at">6.2 at</span></h2><h3><span id="621-基本介绍">6.2.1 基本介绍</span></h3><p>1.at命令是一次性定时计划任务，at的守护进程atd会以后台模式运行，检查作业队列来运行<br>2.默认情况下，atd守护进程每60秒检查作业队列，有作业时，会检查作业运行时间，如果时间和当前时间匹配，则运行此作业<br>3.at命令是一次性定时计划任务，执行完一个任务后不再执行此任务<br>4.在使用at命令的时候，一定要保证atd进程的启动，指令<code>ps -ef | grep atd</code><br>可以检测atd是否在运行。</p>
<h3><span id="622-命令格式">6.2.2 命令格式</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">at [选项] [时间]</span><br><span class="line">Ctrl+D 结束at指令的输入，输出两次</span><br></pre></td></tr></table></figure>
<h3><span id="623-命令选项">6.2.3 命令选项</span></h3><table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-m</td>
<td align="left">当指定的任务被完成后，将给用户发送邮件，即使没有标准输出</td>
</tr>
<tr>
<td align="left">-I</td>
<td align="left">atd的别名</td>
</tr>
<tr>
<td align="left">-d</td>
<td align="left">atrm的别名</td>
</tr>
<tr>
<td align="left">-c</td>
<td align="left">显示任务将被执行的时间</td>
</tr>
<tr>
<td align="left">-V</td>
<td align="left">显示版本信息</td>
</tr>
<tr>
<td align="left">-q&lt;队列&gt;</td>
<td align="left">使用指定的队列</td>
</tr>
<tr>
<td align="left">-f&lt;文件&gt;</td>
<td align="left">从指定的文件读入任务而不是从标准输入读入</td>
</tr>
<tr>
<td align="left">-t&lt;时间参数&gt;</td>
<td align="left">以时间参数的形式提交要运行的任务</td>
</tr>
</tbody></table>
<h3><span id="624-at时间定义">6.2.4 at时间定义</span></h3><p>1.接受在当天的<strong>hh:mm</strong>(小时:分钟)式的时间指定。假如该时间已过去，那么就放在第二天执行。例如：04:00<br>2.使用midnight（深夜），noon(中午),teatime(饮茶时间)等比较模糊的词语来指定时间<br>3. 采用12小时计时制，即在时间上加上AM(上午)或PM(下午)例如：12pm<br>4. 执行命令的具体日期指定格式为month day(月，日)或mm/dd/yy(月/日/年)或dd.mm.yy(日.月.年)指定日期必须跟在指定时间的后面例如：04:00 2021-03-11<br>5. 使用相对计时法。指定格式为：now+count time-units,now就是当前时间，time-units是时间单位，可以是minutes,hours,days,weeks。count是时间的数量，几天，几小时。例如:now + 5 minutes<br>6. 直接使用today、tomorrow来指定完成命令的时间</p>
<h1><span id="七-linux磁盘分区挂载">七、Linux磁盘分区，挂载</span></h1>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Centos</tag>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/12/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2><span id="quick-start">Quick Start</span></h2><h3><span id="create-a-new-post">Create a new post</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3><span id="run-server">Run server</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3><span id="generate-static-files">Generate static files</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3><span id="deploy-to-remote-sites">Deploy to remote sites</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>测试</title>
    <url>/2021/12/17/%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>C语言学习随笔</title>
    <url>/2021/12/21/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<p><strong>文章记录C语言学习过程中的难点与需要记忆的地方</strong></p>
<h1><span id="c-primer-plus">C primer Plus</span></h1><h2><span id="第1章">第1章</span></h2><p>使用C语言的步骤<br><strong>定义程序的目标-设计程序-编写代码-编译-运行程序-测试和调试程序-维护和修改代码</strong><br>我认为每个步骤都很重要，在使用过程中很多人跳过或者忽视的前面两步，这是我们应该注意的问题，编写程序之前每一步都想清楚，是写好一个程序的前提。  </p>
<span id="more"></span>
<h2><span id="第2章">第2章</span></h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> 为预处理指令,#表明C预处理器在编译器接手之前处理这条指令</span></span><br></pre></td></tr></table></figure>
<p>头文件<code>&lt;stdio.h&gt;</code>的含义为<strong>标准输入/输出头文件</strong>，该文件中包含了供编译器使用的输入和输出函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*   */</span> 注释内容为符号之间的内容  <span class="comment">//为单行注释</span></span><br></pre></td></tr></table></figure>
<h3><span id="命名">命名</span></h3><p>如果变量名无法清除的表达自身的用途，可在注释中进一步说明。这是一种良好的编程习惯和编程技巧。<br>可以用小写字母、大写字母、数字和下划线（_）来命名。而且，名称的第1个字符必须是字符或下划线，不能是数字<br>名称区分大小写</p>
<h3><span id="提高程序可读性的技巧">提高程序可读性的技巧</span></h3><p>1、选择有意义的函数名<br>2、写注释<br>3、在函数中使用空行分隔概念上的多个部分<br>4、每条语句各占一行<br><strong>调试（debug）</strong></p>
<h3><span id="错误">错误</span></h3><p>语法错误与语义错误，语法错误可以通过编译器检查出来；而语义错误编译器无法检查 </p>
<h3><span id="关键字">关键字</span></h3><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>auto</td>
<td>extern</td>
<td>short</td>
<td>while</td>
</tr>
<tr>
<td>break</td>
<td>float</td>
<td>signed</td>
<td>_Alignas</td>
</tr>
<tr>
<td>case</td>
<td>for</td>
<td>sizeof</td>
<td>_Alignof</td>
</tr>
<tr>
<td>char</td>
<td>goto</td>
<td>static</td>
<td>_Atomic</td>
</tr>
<tr>
<td>const</td>
<td>if</td>
<td>struct</td>
<td>_Bool</td>
</tr>
<tr>
<td>continue</td>
<td>inline</td>
<td>switch</td>
<td>_Complex</td>
</tr>
<tr>
<td>default</td>
<td>int</td>
<td>typedef</td>
<td>_Generic</td>
</tr>
<tr>
<td>do</td>
<td>long</td>
<td>union</td>
<td>_Imaginary</td>
</tr>
<tr>
<td>double</td>
<td>register</td>
<td>unsigned</td>
<td>_Noreturn</td>
</tr>
<tr>
<td>else</td>
<td>restrict</td>
<td>void</td>
<td>_Static_assert</td>
</tr>
<tr>
<td>enum</td>
<td>return</td>
<td>volatile</td>
<td>_Thread_local</td>
</tr>
</tbody></table>
<h2><span id="第3章">第3章</span></h2><h3><span id="数据类型关键字">数据类型关键字</span></h3><table>
<thead>
<tr>
<th>最初K&amp;R给出的关键字</th>
<th>C90标准添加的关键字</th>
<th>C99标准添加的关键字</th>
</tr>
</thead>
<tbody><tr>
<td>int</td>
<td>signed</td>
<td>_Bool</td>
</tr>
<tr>
<td>long</td>
<td>void</td>
<td>_Complex</td>
</tr>
<tr>
<td>short</td>
<td></td>
<td>_Imaginary</td>
</tr>
<tr>
<td>unsigned</td>
<td></td>
<td></td>
</tr>
<tr>
<td>char</td>
<td></td>
<td></td>
</tr>
<tr>
<td>float</td>
<td></td>
<td></td>
</tr>
<tr>
<td>double</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3><span id="printf函数中的转换说明-修饰符和标记">printf()函数中的转换说明、修饰符和标记</span></h3><table>
<thead>
<tr>
<th>转换说明</th>
<th>输出结果</th>
</tr>
</thead>
<tbody><tr>
<td>%d or %i</td>
<td>有符号十进制数</td>
</tr>
<tr>
<td>%c</td>
<td>单个字符</td>
</tr>
<tr>
<td>%f</td>
<td>浮点数的十进制计数法</td>
</tr>
<tr>
<td>%u</td>
<td>无符号的十进制数</td>
</tr>
<tr>
<td>%o</td>
<td>无符号的八进制数</td>
</tr>
<tr>
<td>%x</td>
<td>无符号的十六进制数</td>
</tr>
<tr>
<td>%a</td>
<td>浮点数、十六进制数字和p计数法（C99/C11）</td>
</tr>
<tr>
<td>%A</td>
<td>浮点数、十六进制数字和p计数法（C99/C11）</td>
</tr>
<tr>
<td>%e</td>
<td>浮点数、e计数法</td>
</tr>
<tr>
<td>%E</td>
<td>浮点数、E计数法</td>
</tr>
<tr>
<td>%g</td>
<td>根据值的不同，自动选择%f或%e。%e格式用于指数小于-4或者大于或等于精度时</td>
</tr>
<tr>
<td>%G</td>
<td>根据值的不同，自动选择%f或%E。%E格式用于指数小于-4或者大于或等于精度时</td>
</tr>
<tr>
<td>%p</td>
<td>指针（就是指地址）</td>
</tr>
<tr>
<td>%s</td>
<td>字符串</td>
</tr>
<tr>
<td>%%</td>
<td>打印百分号</td>
</tr>
<tr>
<td>tips:有些说明符并不经常用到，写在这里是为了查询方便</td>
<td></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>标记</td>
<td>5种标记（+、-、空格、#、0）  <br>示例:%-10d</td>
</tr>
<tr>
<td>数字</td>
<td>最小字段宽度<br>如果该字段不能容纳待打印的数字或字符串，系统会使用更宽的字段</td>
</tr>
<tr>
<td>.数字</td>
<td>精度<br>对于%e、%E和%f转换，表示小数点右边数字的位数<br>对于%g和%G转换，表示有效数字的最大位数<br>对于%s转换，表示待打印字符的最大数量<br>对于整型转换，表示待打印数字的最小位数<br>如有必要，使用前导0来达到这个位数<br>只使用.表示其后跟随一个0,所以%.f和%.0f相同<br>示例：”%5.2f”打印一个浮点数，字段宽度为5字符，其中小数点后有两位数字</td>
</tr>
<tr>
<td>h</td>
<td>和整型转换说明一起使用，表示short int或unsigned short int类型的值<br>示例：”%hu”、”%hx”、”%6.4hd”</td>
</tr>
<tr>
<td>hh</td>
<td>和整型转换说明一起使用，表示signed char或unsigned char类型的值<br>示例：”%hhu”、”%hhx”、”%6.4hhd”</td>
</tr>
<tr>
<td>j</td>
<td>和整型转换说明一起使用,表示intmax_t或uintmax_t类型的值。这些类型定义在stdint.h中<br>示例：”%jd” “%8jx”</td>
</tr>
<tr>
<td>l</td>
<td>和整型转换说明一起使用，表示long int或unsigned long int类型的值<br>示例：”%ld” “%8lu”</td>
</tr>
<tr>
<td>ll</td>
<td>和整型转换说明一起使用，表示long long int或unsigned long long int类型的值(C99)<br>示例：”%lld” “%8llu”</td>
</tr>
<tr>
<td>L</td>
<td>和浮点转换说明一起使用,表示long double类型的值<br>示例：”%Lf” “%10.4Le”</td>
</tr>
<tr>
<td>t</td>
<td>和整型转换说明一起使用，表示ptrdiff_t类型的值。ptrdiff_t是两个指针差值的类型(C99)<br>示例：”%td” “%12ti”</td>
</tr>
<tr>
<td>z</td>
<td>和整型转换说明一起使用表示size_t类型的值。size_t是sizeof返回的类型(C99)<br>示例：”%zd” “%12zd”</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>标记</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-</td>
<td>待打印项左对齐，即，从字段的左侧开始打印该项</td>
</tr>
<tr>
<td>+</td>
<td>有符号值若为正在其前面显示+，若为负，在其前面显示-</td>
</tr>
<tr>
<td>空格</td>
<td>有符号值若为正，则在值前面显示前导空格（不显示任何符号），若为负，则在值前面显示-</td>
</tr>
<tr>
<td>#</td>
<td>把结果转换为另一种形式。如果是%o格式，则以0开始；如狗是%x或%X格式，则以0x或0X开始；对于所有的浮点格式，#保证了即使后面没有任何数字，也打印一个小数点字符。对于%g和%G格式，#防止结果后面的0被删除<br>示例：”%#o” “%#8.0f” “%+#10.3e”</td>
</tr>
<tr>
<td>0</td>
<td>对于数值格式，用前导0代替空格填充字段宽度。对于整数格式，如果出现-标记或指定精度则忽略该标记<br>示例：”%010d” “%0.83f”</td>
</tr>
</tbody></table>
<h2><span id="第4章">第4章</span></h2><p><code>scanf</code>读取字符串，在遇到第一个空白时停止</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sizeof</span>()    以字节为单位给出对象的大小</span><br><span class="line"><span class="built_in">strlen</span>()    给出字符串中的字符长度,需要头文件<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line">宏定义<span class="meta">#<span class="meta-keyword">define</span> NAME value</span></span><br><span class="line"><span class="keyword">const</span>    只读  </span><br></pre></td></tr></table></figure>
<p><strong>limits.h中的一些明示常量</strong></p>
<table>
<thead>
<tr>
<th>明示常量</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>CHAR_BIT</td>
<td>char的位数</td>
</tr>
<tr>
<td>CHAR_MAX</td>
<td>char类型的最大值</td>
</tr>
<tr>
<td>CHAR_MIN</td>
<td>char类型的最小值</td>
</tr>
<tr>
<td>SCHAR_MAX</td>
<td>signed char类型的最大值</td>
</tr>
<tr>
<td>SCHAR_MIN</td>
<td>signed char类型的最小值</td>
</tr>
<tr>
<td>UCHAR_MAX</td>
<td>unsigned char类型的最大值</td>
</tr>
<tr>
<td>SHRT_MAX</td>
<td>short类型的最大值</td>
</tr>
<tr>
<td>SHRT_MIN</td>
<td>short类型的最小值</td>
</tr>
<tr>
<td>USHRT_MAX</td>
<td>unsinged short类型的最大值</td>
</tr>
<tr>
<td>INT_MAX</td>
<td>int类型的最大值</td>
</tr>
<tr>
<td>INT_MIN</td>
<td>int类型的最小值</td>
</tr>
<tr>
<td>UINT_MAX</td>
<td>unsigned int类型的最大值</td>
</tr>
<tr>
<td>LONG_MAX</td>
<td>long类型的最大值</td>
</tr>
<tr>
<td>LONG_MIN</td>
<td>long类型的最小值</td>
</tr>
<tr>
<td>ULONG_MAX</td>
<td>unsigned long类型的最大值</td>
</tr>
<tr>
<td>LLONG_MAX</td>
<td>long long类型的最大值</td>
</tr>
<tr>
<td>LLONG_MIN</td>
<td>long long类型的最小值</td>
</tr>
<tr>
<td>ULLONG_MAX</td>
<td>unsigned long long类型的最大值</td>
</tr>
</tbody></table>
<p><strong>float.h中的一些明示常量</strong></p>
<table>
<thead>
<tr>
<th>明示常量</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>FLT_MANT_DIG</td>
<td>float类型的尾数位数</td>
</tr>
<tr>
<td>FLT_DIG</td>
<td>float类型的最少有效数字位数（十进制）</td>
</tr>
<tr>
<td>FLT_MIN_10_EXP</td>
<td>带全部有效数字的float类型的最小负指数（以10为底）</td>
</tr>
<tr>
<td>FLT_MAX_10_EXP</td>
<td>float类型的最大正指数(以10为底)</td>
</tr>
<tr>
<td>FLT_MIN</td>
<td>保留全部精度的float类型最小正数</td>
</tr>
<tr>
<td>FLT_MAX</td>
<td>float类型最大正数</td>
</tr>
<tr>
<td>FLT_EPSILON</td>
<td>1.00和比1.00大的最小float之间的差值</td>
</tr>
</tbody></table>
<h2><span id="第5章">第5章</span></h2><p><strong>运算符优先级（从高到低）</strong></p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>结合律</th>
</tr>
</thead>
<tbody><tr>
<td>()</td>
<td>从左往右</td>
</tr>
<tr>
<td>+ -（一元）</td>
<td>从右往左</td>
</tr>
<tr>
<td>* /</td>
<td>从左往右</td>
</tr>
<tr>
<td>+ -（二元）</td>
<td>从左往右</td>
</tr>
<tr>
<td>=</td>
<td>从右往左</td>
</tr>
<tr>
<td>注：结合律只适用于<strong>共享</strong>同一运算对象的运算符</td>
<td></td>
</tr>
<tr>
<td>例如：12 / 3 * 2中按照从左往右的结合律计算结果为8，若从右往左则为2</td>
<td></td>
</tr>
</tbody></table>
<p>C语言规定，<code>sizeof</code>返回<code>size_t</code>类型的值。这是一个无符号整数类型，但它不是新类型。<code>size_t</code>是语言定义的标准类型<br>C语言的<code>typedef</code>机制，允许程序员为现有变量创建别名 例：<code>typedef double real</code>，意为把<code>real</code>定义为<code>double</code>类型的别名。<br>C99做了进一步调整，新增了<code>%zd</code>转换说明用于<code>printf()</code>显示<code>size_t</code>类型的值。如果系统不支持<code>%zd</code>,可以用<code>%u</code>或<code>%lu</code>代替<code>%zd</code></p>
<h3><span id="类型转换">类型转换</span></h3><p>1.<strong>升级</strong>：较小类型转换为较大类型<br>2.涉及两种类型的运算，两个值会被分别转换成两种类型的更高级别<br>3.类型的级别从高到低依次为：<code>long double、double、float、unsigned long long、long long、unsigned long、long、unsigned int、int</code>，例外的情况是：当<code>long</code>和<code>int</code>的大小相同时，<code>unsigned int</code> 比 <code>long</code>的级别高。之所以<code>short</code>和<code>char</code>类型没有列出，是因为它们已经被升级到int和<code>unsigned int</code><br>4.在赋值表达式语句中，计算的最终结果会被转换成被赋值变量的类型。这个过程中可能导致类型<strong>升级</strong><em>或*<em>降级</em></em><br>5.当作为函数参数传递时，<code>char</code>和<code>short</code>被转换为<code>int</code>,<code>float</code>被转换为<code>double</code>.  </p>
<p><strong>强制类型转换运算符</strong>：(类型名) 例如：(int)<br>求模运算符：<code>%</code></p>
<h2><span id="第6章">第6章</span></h2><p><code>scanf()</code>函数读取成功返回正确读入字符的个数（大于0），不成功返回0；如果<code>scanf()</code>在转换值之前出了问题（例如，检测文件结尾或遇到硬件问题），会返回一个特殊值EOF（其值通常被定义为-1）<br><strong>空语句</strong>：用单独的分号表示<br>例如：  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num) == <span class="number">1</span>)</span><br><span class="line">    ;  <span class="comment">//跳过整数输入</span></span><br></pre></td></tr></table></figure>
<h3><span id="真">真</span></h3><p><strong>一般来说，所有的非零值都视为真；关系表达式为真，求值得1；关系表达式为假，求值得0</strong><br><strong>为了避免赋值（=）与判断（==）混淆，可以把常量放在左侧：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span> = canoes  <span class="comment">//语法错误</span></span><br><span class="line"><span class="number">5</span> == canoed  <span class="comment">//正确</span></span><br></pre></td></tr></table></figure>
<h3><span id="运算符优先级">运算符优先级</span></h3><p><strong>算术运算符&gt;关系运算符&gt;赋值运算符</strong></p>
<table>
<thead>
<tr>
<th>运算符（优先级从高到低）</th>
<th>结合律</th>
</tr>
</thead>
<tbody><tr>
<td>()</td>
<td>从左往右</td>
</tr>
<tr>
<td>- + ++ – sizeof</td>
<td>从右往左</td>
</tr>
<tr>
<td>* / %</td>
<td>从左往右</td>
</tr>
<tr>
<td>+ -</td>
<td>从左往右</td>
</tr>
<tr>
<td>&lt; &gt; &lt;= &gt;=</td>
<td>从左往右</td>
</tr>
<tr>
<td>== !=</td>
<td>从左往右</td>
</tr>
<tr>
<td>=</td>
<td>从右往左</td>
</tr>
</tbody></table>
<h3><span id="其他赋值运算符">其他赋值运算符</span></h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">a += <span class="number">1</span> 与 a = a + <span class="number">1</span> 相同</span><br><span class="line">a -= <span class="number">1</span> 与 a = a - <span class="number">1</span> 相同</span><br><span class="line">a *= <span class="number">1</span> 与 a = a * <span class="number">1</span> 相同</span><br><span class="line">a /= <span class="number">1</span> 与 a = a / <span class="number">1</span> 相同</span><br><span class="line">a %= <span class="number">1</span> 与 a = a % <span class="number">1</span> 相同</span><br></pre></td></tr></table></figure>
<h3><span id="逗号运算符">逗号运算符</span></h3><p>一、逗号运算符保证了被它分隔的表达式从左往右求值（换言之，逗号是一个序列点，所以逗号左侧的所有副作用都在程序执行逗号右侧项之前发生）<br>二、整个逗号表达式的值是右侧项的值，例如</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">x = (y=<span class="number">3</span>,(z = ++y + <span class="number">2</span>) + <span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<h2><span id="第7章">第7章</span></h2><h3><span id="getchar和putchar">getchar()和putchar()</span></h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ch = getchar();   <span class="comment">//通常定义在stdio.h头文件中</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch);  <span class="comment">//与上述语句作用相同</span></span><br><span class="line"><span class="built_in">putchar</span>(ch);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,ch);  <span class="comment">//与上述语句作用相同</span></span><br></pre></td></tr></table></figure>
<p>字符是作为整数储存的<br><strong>表7.1 ctype.h头文件中的字符测试函数</strong></p>
<p>函数名|如果是下列参数时，返回值为真|<br>|-|-|<br>|isalnum()|字母数字（字母或数字）|<br>|isalpha()|字母|<br>|isblank()|标准的空白字符（空格、水平制表符或换行符）或任何其他本地化指定为空白的字符|<br>|iscntrl()|控制字符，如Ctrl + B|<br>|isdigit()|数字|<br>|isgraph()|除空格之外的任意可打印字符|<br>|islower()|小写字母|<br>|isprint()|可打印字符|<br>|ispunct()|标点符号（除空格字母数字字符以外的任何可打印字符）|<br>|isspace()|空白字符（空格、换行符、换页符、回车符、垂直制表符、水平制表符或本地化定义的字符|<br>|isupper()|大写字母|<br>|isxdigit()|十六进制数字符|</p>
<p><strong>表7.2 ctype.h头文件中的字符映射函数</strong></p>
<table>
<thead>
<tr>
<th>函数名</th>
<th>行为</th>
</tr>
</thead>
<tbody><tr>
<td>tolower()</td>
<td>如果参数是大写字符，该函数返回小写字符；否则，返回原始参数</td>
</tr>
<tr>
<td>toupper()</td>
<td>如果参数是小写字符，该函数返回大写字符；否则，返回原始参数</td>
</tr>
</tbody></table>
<h3><span id="逻辑运算符">逻辑运算符</span></h3><table>
<thead>
<tr>
<th>逻辑运算符（传统写法）</th>
<th>逻辑运算符（iso646.h）</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;&amp;</td>
<td>and</td>
<td>与</td>
</tr>
<tr>
<td>&#124;&#124;</td>
<td>or</td>
<td>或</td>
</tr>
<tr>
<td>!</td>
<td>not</td>
<td>非</td>
</tr>
</tbody></table>
<h4><span id="优先级">优先级</span></h4><p>！运算符的优先级与递增运算符的优先级相同<br>&amp;&amp;运算符 的优先级比 ||运算符 的优先级高</p>
<h3><span id="条件运算符">条件运算符： ?:</span></h3><p>表达式的通用内容如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">expression1 ? expression2 :expression3</span><br></pre></td></tr></table></figure>
<p>如果expression1为真（非 0），那么整个条件表达式的值与expression2的值相同；如果expression1的值为假（0），那么整个条件表达式的值与expression3的值相同。</p>
<h3><span id="_bool类型">_Bool类型</span></h3><p>使用<code>stdbool.h</code>库</p>
<h3><span id="continue与break">continue与break</span></h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure>
<p>用于循环语句中，执行上述语句时，会跳过本次循环的剩余部分，并开始下一轮循环。如果<code>continue;</code>语句在嵌套循环内，则只会影响包含该语句的内层循环。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>
<p>用于循环语句中，程序执行到break语句时，会终止包含它的循环，并继续执行下一阶段。</p>
<h3><span id="switch语句">switch语句</span></h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(number)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: statement <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: statement <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: statement <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: statement <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若有匹配的标签，则跳转到标签行，否则跳转到<code>default:</code>标签行。</p>
<h2><span id="第8章">第8章</span></h2><h3><span id="缓冲">缓冲</span></h3><p><strong>ANSI C</strong>把缓冲输入作为标准<br>缓冲分为两类：完全缓冲I/O和行缓冲I/O。完全缓冲输入指的是当缓冲区被填满时才刷新缓冲区（内容被发送至目的地），通常出现在文件输入中</p>
<h3><span id="文件结尾">文件结尾</span></h3><p>在C语言中，用<code>getchar()</code>读取文件检测到文件结尾时会返回一个特殊的值，即<code>EOF(end of file</code>的缩写)。<code>scanf()</code>函数检测到文件结尾时也会返回<code>EOF</code><br><code>EOF</code>定义在<code>stdio.h</code>头文件中：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EOF (-1)</span></span><br></pre></td></tr></table></figure>
<h3><span id="重定向">重定向</span></h3><p>绝大部分C系统都可以使用重定向，可以通过操作系统重定向所有程序，或只在C编译器允许的情况下重定向C程序。假设<code>prog</code>是可执行程序名，file1和file2是文件名。<br><strong>把输出重定向至文件: &gt;</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./prog &gt; file1</span><br></pre></td></tr></table></figure>
<p><strong>把输入重定向至文件: &lt;</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./prog &lt; file2</span><br></pre></td></tr></table></figure>
<p><strong>组合重定向：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./prog &lt;file2 &gt;file1</span><br><span class="line">./prog &gt;file1 &lt;file2</span><br><span class="line">这两种形式都是把file2作为输入、file1作为输出。</span><br></pre></td></tr></table></figure>
<p>tips：<br>  一些系统要求重定向运算符左侧有一个空格，右侧没有空格。而其他系统（如，UNIX）允许在重定位运算符两侧有空格或没有空格</p>
<h3><span id="输入流">输入流</span></h3><p>  输入由字符组成，但是<code>scanf()</code>可以把输入转换成整数值或浮点数值。使用转换说明（如<code>%d</code>或<code>%f</code>）限制了可接受输入的字符类型，而<code>getchar()</code>和使用<code>%c</code>的<code>scanf()</code>接受所有的字符。</p>
<h2><span id="第9章">第9章</span></h2>  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%*d&quot;</span>)  <span class="comment">//*在scanf()函数中的作用为跳过</span></span><br></pre></td></tr></table></figure>

<h2><span id="第10章">第10章</span></h2><p>  指针的值是它所指向对象的地址。地址的表示方式依赖于计算机内部的硬件。许多计算机（包括PC和Macintosh）都是<strong>按字节编址</strong>，意思是内存中的每个字节都按顺序编号。这里，一个较大对象的地址（如double类型的变量）通常是该对象第一个字节的地址。<br>  在指针前面使用*运算符可以得到该指针所指向对象的值。<br>  指针加1，指针的值递增它所指向类型的大小（以字节为单位）。</p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>我的学习计划</title>
    <url>/2021/12/21/%E6%88%91%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<h1><span id="c-primer-plus">C Primer Plus</span></h1><h2><span id="前言">前言</span></h2><p><strong>1-9章一天至少1章，后面几章可以两天1章</strong><br><strong>学习完1章的标准为，做完课后练习题为准</strong></p>
<h2><span id="学习进度">学习进度</span></h2><p>2021.12.21 第一章:完成,第二章：练习题没做完，懒得做了<br>2021.12.22 第三章：完成<br>2021.12.23 第四章：看了一部分<br>2021.12.24 第四章、第五章<br><strong>本次学习已看完的部分不会再重复看，只有在需要查阅资料的时候回看</strong><br>2021.12.27 第五章最后一部分，第六章完成，第七章一部分<br>2021.12.30 第七章，第八章<br>2022.1.4</p>
]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>一个跳过空白字符的程序</title>
    <url>/2021/12/31/%E4%B8%80%E4%B8%AA%E8%B7%B3%E8%BF%87%E7%A9%BA%E7%99%BD%E5%AD%97%E7%AC%A6%E7%9A%84%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span> </span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">get_first</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> ch;</span><br><span class="line">	ch = get_first();  <span class="comment">//调用函数</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%c,%d&quot;</span>,ch,ch);  <span class="comment">//测试效果</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">get_first</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">int</span> ch;</span><br><span class="line">    <span class="comment">/* 若读取的为空白字符，跳过它，并将空白字符之后的第一个字符赋值给ch */</span></span><br><span class="line">	<span class="keyword">for</span>(ch = getchar();<span class="built_in">isspace</span>(ch) != <span class="number">0</span>;)</span><br><span class="line">	  ch = getchar();</span><br><span class="line">	<span class="comment">/* 跳过ch之后的字符，碰到换行符结束循环 */</span></span><br><span class="line">    <span class="keyword">while</span> (getchar() != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>关于i++与++i的思考</title>
    <url>/2022/01/05/%E5%85%B3%E4%BA%8Ei++%E4%B8%8E++i%E7%9A%84%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<p><strong>如何理解i++与++i?</strong><br>首先，在理解++与–的情况下，的确可以使程序更简洁，但个人认为其并不适合与很多运算符一起使用，因为在没有注释的情况下，这让程序的可读性变得很差。<br>考虑下面一个程序</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> s1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> s2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> p[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> *start = p;</span><br><span class="line">    s1 += *start++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1 = %d\n&quot;</span>,s1);</span><br><span class="line">    s2 = *start;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s2 = %d&quot;</span>,s2); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>s1,s2</code>的值是多少？<br>要解答这个问题，就要先搞清赋值与自增的先后问题</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    a = ++i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d&quot;</span>,a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的程序中输出为a = 1<br>而在</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    a = i++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d&quot;</span>,a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个程序中输出为<code>a = 0</code>，为什么？<br>在《C Primer Plus》中这样描述，单独使用递增运算符时（如,<code>i++;</code>），使用<code>i++;</code>或<code>++i;</code>都没有关系。但是当运算对象是更复杂表达式的一部分时，使用前缀和后缀的效果不同。但是这里并没有解释不同的原因。在这里我会结合网上其它人的答案，给出我自己的解释，但是仅供参考：<br>在前面我们看到使用<code>a = ++i;</code>时，先递增i再将结果赋值给a；而<code>a = i++;</code>时先赋值，再递增。这就产生了一个问题：自增运算符（<code>++</code>）的优先级要高于赋值运算符（<code>=</code>），为什么要先赋值呢？并不是C本身语法出了问题，因为确实是先自增，后赋值，问题是出在了<code>i++</code>的返回值是其自增之前的值，而<code>++i</code>返回自增之后的值。<br>这里只是给出一个思考，造成问题如此复杂的原因是C语言更底层的原因，而我们在实际操作中可以理解<code>a = i++;</code>为先赋值再自增。<br>理解了这个问题之后，就可以解决<br><code>s1 = *start++;</code>的问题了，<code>*</code>与<code>++</code>的优先级相同，结合律自右向左，先<code>++</code>后指向，但是<code>++</code>在后面所以返回的是自增之前的值，<code>s1</code>的值应该是数组第一个元素的值，也就是<strong>1</strong>。为了验证<code>start</code>是否自增，使用<code>s2</code>测试，结果输出<code>s2</code>为<strong>2</strong>,证明指针自增了，感兴趣的同学可以自己验证一下。</p>
]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
</search>
